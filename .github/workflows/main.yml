name: üöÄ Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 20

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 18

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install deps
        run: pnpm install

      - name: üîé Type check
        run: npm run typecheck --if-present

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [lint, typecheck, vitest, cypress]
    # only deploy main/dev branch on pushes
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    steps:
      - name: ‚¨áÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîì Login to Vultr Container Registry
        uses: docker/login-action@v3
        with:
          registry: sjc.vultrcr.com/chrisparsons
          username: ${{ secrets.VULTR_USERNAME }}
          password: ${{ secrets.VULTR_API_KEY }}

      - name: üóÑÔ∏è Save to Vultr Container Registry
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: sjc.vultrcr.com/chrisparsons/fantasyoth:latest
          cache-from: type=registry,ref=sjc.vultrcr.com/chrisparsons/fantasyoth:latest

      - name: Deploy app to Vultr VPS
        uses: appleboy/ssh-action@master
        env:
          VULTR_USERNAME: ${{ secrets.VULTR_USERNAME }}
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: VULTR_USERNAME, VULTR_API_KEY
          script: |
            docker login sjc.vultrcr.com/chrisparsons -u $VULTR_USERNAME -p $VULTR_API_KEY && cd fantasyoth && docker compose pull && docker compose up -d
