// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FSquaredEntry {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season          Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId        String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  teams Team[]

  @@unique([seasonId, userId], name: "entryByUserAndSeason")
}

model League {
  id                  String @id @default(cuid())

  name                String
  division            Int
  fleaflickerLeagueId Int @unique
  draftDateTime       DateTime

  season              Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId            String

  teams               Team[]
}

model Season {
  id                      String   @id @default(cuid())
  startYear               Int
  isActive                Boolean
  isOpenForRegistration   Boolean

  Leagues League[]
  fSquaredEntries FSquaredEntry[]
}

model Team {
  id                      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  league          League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId        String

  fleaflickerTeamId Int @unique

  ownerName       String
  teamName        String
  pointsFor       Float
  draftPosition   Int
  wins            Int?

  FSquaredSelections FSquaredEntry[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  discordUserId String
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  fSquaredEntries FSquaredEntry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}